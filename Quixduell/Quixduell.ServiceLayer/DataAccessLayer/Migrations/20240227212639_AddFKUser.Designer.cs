// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Quixduell.ServiceLayer.DataAccessLayer;
using Quixduell.ServiceLayer.DataAccessLayer.Model;

#nullable disable

namespace Quixduell.ServiceLayer.DataAccessLayer.Migrations
{
    [DbContext(typeof(AppDatabaseContext<User>))]
    [Migration("20240227212639_AddFKUser")]
    partial class AddFKUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Quixduell.ServiceLayer.DataAccessLayer.Model.Answers.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("answer_type")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.HasKey("Id");

                    b.ToTable("Answer");

                    b.HasDiscriminator<string>("answer_type").HasValue("a");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Quixduell.ServiceLayer.DataAccessLayer.Model.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Quixduell.ServiceLayer.DataAccessLayer.Model.Questions.BaseQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Hint")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("StudysetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("question_type")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.HasKey("Id");

                    b.HasIndex("StudysetId");

                    b.ToTable("BaseQuestion");

                    b.HasDiscriminator<string>("question_type").HasValue("BaseQuestion");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Quixduell.ServiceLayer.DataAccessLayer.Model.Rating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Value")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Rating");
                });

            modelBuilder.Entity("Quixduell.ServiceLayer.DataAccessLayer.Model.Studyset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Studysets");
                });

            modelBuilder.Entity("Quixduell.ServiceLayer.DataAccessLayer.Model.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Quixduell.ServiceLayer.DataAccessLayer.Model.UserStudysetConnection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Highscore")
                        .HasColumnType("real");

                    b.Property<bool>("IsStored")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastSeen")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RatingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudysetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RatingId");

                    b.HasIndex("StudysetId");

                    b.HasIndex("UserId");

                    b.ToTable("UserStudysetConnection");
                });

            modelBuilder.Entity("StudysetContributors", b =>
                {
                    b.Property<Guid>("ContributedStudysetsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContributorsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ContributedStudysetsId", "ContributorsId");

                    b.HasIndex("ContributorsId");

                    b.ToTable("StudysetContributors");
                });

            modelBuilder.Entity("UsersRequestedToBecomeContributor", b =>
                {
                    b.Property<string>("UsersRequestedToBecomeContributorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("UsersRequestedToBecomeContributorsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UsersRequestedToBecomeContributorId", "UsersRequestedToBecomeContributorsId");

                    b.HasIndex("UsersRequestedToBecomeContributorsId");

                    b.ToTable("UsersRequestedToBecomeContributor");
                });

            modelBuilder.Entity("Quixduell.ServiceLayer.DataAccessLayer.Model.Answers.MultipleChoiceAnswer", b =>
                {
                    b.HasBaseType("Quixduell.ServiceLayer.DataAccessLayer.Model.Answers.Answer");

                    b.Property<bool>("IsTrue")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MultipleChoiceQuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("MultipleChoiceQuestionId");

                    b.HasDiscriminator().HasValue("mca");
                });

            modelBuilder.Entity("Quixduell.ServiceLayer.DataAccessLayer.Model.Questions.MultipleChoiceQuestion", b =>
                {
                    b.HasBaseType("Quixduell.ServiceLayer.DataAccessLayer.Model.Questions.BaseQuestion");

                    b.HasDiscriminator().HasValue("mcq");
                });

            modelBuilder.Entity("Quixduell.ServiceLayer.DataAccessLayer.Model.Questions.OpenQuestion", b =>
                {
                    b.HasBaseType("Quixduell.ServiceLayer.DataAccessLayer.Model.Questions.BaseQuestion");

                    b.Property<Guid>("AnswerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("AnswerId");

                    b.HasDiscriminator().HasValue("oq");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Quixduell.ServiceLayer.DataAccessLayer.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Quixduell.ServiceLayer.DataAccessLayer.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quixduell.ServiceLayer.DataAccessLayer.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Quixduell.ServiceLayer.DataAccessLayer.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Quixduell.ServiceLayer.DataAccessLayer.Model.Questions.BaseQuestion", b =>
                {
                    b.HasOne("Quixduell.ServiceLayer.DataAccessLayer.Model.Studyset", null)
                        .WithMany("Questions")
                        .HasForeignKey("StudysetId");
                });

            modelBuilder.Entity("Quixduell.ServiceLayer.DataAccessLayer.Model.Studyset", b =>
                {
                    b.HasOne("Quixduell.ServiceLayer.DataAccessLayer.Model.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quixduell.ServiceLayer.DataAccessLayer.Model.User", "Creator")
                        .WithMany("CreatedStudysets")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Quixduell.ServiceLayer.DataAccessLayer.Model.UserStudysetConnection", b =>
                {
                    b.HasOne("Quixduell.ServiceLayer.DataAccessLayer.Model.Rating", "Rating")
                        .WithMany()
                        .HasForeignKey("RatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quixduell.ServiceLayer.DataAccessLayer.Model.Studyset", "Studyset")
                        .WithMany("Connections")
                        .HasForeignKey("StudysetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Quixduell.ServiceLayer.DataAccessLayer.Model.User", "User")
                        .WithMany("StudysetConnections")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Rating");

                    b.Navigation("Studyset");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudysetContributors", b =>
                {
                    b.HasOne("Quixduell.ServiceLayer.DataAccessLayer.Model.Studyset", null)
                        .WithMany()
                        .HasForeignKey("ContributedStudysetsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Quixduell.ServiceLayer.DataAccessLayer.Model.User", null)
                        .WithMany()
                        .HasForeignKey("ContributorsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("UsersRequestedToBecomeContributor", b =>
                {
                    b.HasOne("Quixduell.ServiceLayer.DataAccessLayer.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UsersRequestedToBecomeContributorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Quixduell.ServiceLayer.DataAccessLayer.Model.Studyset", null)
                        .WithMany()
                        .HasForeignKey("UsersRequestedToBecomeContributorsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Quixduell.ServiceLayer.DataAccessLayer.Model.Answers.MultipleChoiceAnswer", b =>
                {
                    b.HasOne("Quixduell.ServiceLayer.DataAccessLayer.Model.Questions.MultipleChoiceQuestion", null)
                        .WithMany("Answers")
                        .HasForeignKey("MultipleChoiceQuestionId");
                });

            modelBuilder.Entity("Quixduell.ServiceLayer.DataAccessLayer.Model.Questions.OpenQuestion", b =>
                {
                    b.HasOne("Quixduell.ServiceLayer.DataAccessLayer.Model.Answers.Answer", "Answer")
                        .WithMany()
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Answer");
                });

            modelBuilder.Entity("Quixduell.ServiceLayer.DataAccessLayer.Model.Studyset", b =>
                {
                    b.Navigation("Connections");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Quixduell.ServiceLayer.DataAccessLayer.Model.User", b =>
                {
                    b.Navigation("CreatedStudysets");

                    b.Navigation("StudysetConnections");
                });

            modelBuilder.Entity("Quixduell.ServiceLayer.DataAccessLayer.Model.Questions.MultipleChoiceQuestion", b =>
                {
                    b.Navigation("Answers");
                });
#pragma warning restore 612, 618
        }
    }
}
