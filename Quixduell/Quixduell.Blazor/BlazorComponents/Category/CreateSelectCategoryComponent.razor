@namespace Quixduell.Blazor.BlazorComponents.Category
@using Microsoft.AspNetCore.Identity
@inject ILernsetCategoryRepository LernsetCategoryRepository
@inject IJSRuntime JsRuntime


@code {
    /*
    * Component can be used to choose or create a new Category, 
    * On Select Category will fire a Event
    * Consits of a Searchfield, Table, and Button to Add new Users
    */
}

<div class="container" style="height:20vh;overflow-y:scroll">
    @if (_categories is not null)
    {
        <div class="form-group">
            <div class="input-group">
                <input class="form-control" placeholder="Suche..." @bind=_searchString @bind:event="oninput" @bind:after="SearchCategories">
            </div>
            <table class="table">
                <thead>
                    <tr>
                        <th scope="col">Kategorie</th>
                    </tr>
                </thead>
                <tbody>
                    <Virtualize Items="_displayedCategories" Context="Category" ItemSize="10" OverscanCount="5">
                        <tr @onclick="() => CategorySelect(Category)">
                            <td>@Category.Name</td>
                        </tr>
                    </Virtualize>
                </tbody>
            </table>
        </div>
    }
</div>
<div>
    <button type="button" class="btn" @onclick="CreateCategory">Kategorie hinzufügen</button>
</div>





@code
{
    [Parameter]
    public EventCallback<Category> CategorySelected { get; set; }


    private List<Category>? _categories;
    private List<Category>? _displayedCategories;
    private string _searchString = "";

    /// <summary>
    /// Load all Categories and execute Filter Methode <see cref="SearchCategories"/>
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _categories = new List<Category>(await LernsetCategoryRepository.GetCategoriesAsync());
        SearchCategories();
    }

    /// <summary>
    /// Execute <see cref="CategorySelected"/> for input param
    /// </summary>
    /// <param name="category"></param>
    /// <returns></returns>
    private async Task CategorySelect(Category category)
    {
        await CategorySelected.InvokeAsync(category);
    }

    /// <summary>
    /// Filter all Categories from <see cref="_categories"/> with Searchstring <see cref="_searchString"/>
    /// Save Result in <seealso cref="_displayedCategories"/>
    /// </summary>
    private void SearchCategories()
    {
        if (_categories is not null)
        {
            _displayedCategories = _categories.FindAll(o => o.Name.ToLower().Contains(_searchString.ToLower()));
            StateHasChanged();
        }
    }

    /// <summary>
    /// Prompt for a new Category Name, Create one, if it does not exists
    /// Show Error if exists already 
    /// Execute <see cref="SearchCategories"/> after 
    /// </summary>
    /// <returns></returns>
    private async Task CreateCategory()
    {
        string prompted = await JsRuntime.InvokeAsync<string>("prompt", "Kategorie:"); // Prompt
        if (prompted is not null && !String.IsNullOrWhiteSpace(prompted))
        {
            var existingCategories = await LernsetCategoryRepository.GetCategoriesAsync();
            if (existingCategories.Any(o => o.Name.ToLower() == prompted.ToLower()))
            {
                await JsRuntime.InvokeVoidAsync("alert", "Kategorie existiert bereits!");
                return;
            }
            await LernsetCategoryRepository.CreateCategoryAsync(new Category() { Name = prompted });
            _categories = new List<Category>(await LernsetCategoryRepository.GetCategoriesAsync());
            SearchCategories();
        }


    }


}
