@namespace Quixduell.Blazor.BlazorComponents.User
@using Microsoft.AspNetCore.Identity
@inject IServiceProvider ServiceProvider
@inject UserManager<AppUser> UserManager


@code{
    /*
     * Component can be used to Add or Remove Users to a List, works with Events for the Parent Component
     */
}

<div>
    <div class="input-group">
        <InputText class="form-control" @bind-Value=_searchString @bind-Value:after="SearchCategories"></InputText>
        <div class="input-group-append">
            <button class="btn btn-outline-secondary" type="button">Suche</button>
        </div>
    </div>
<div class="container" style="height:20vh;overflow-y:scroll">
    <table class="table">
        <thead>
            <tr>
                <th scope="col"></th>
                <th scope="col">Nutzer</th>
                <th scope="col"></th>
                <th scope="col"></th>
            </tr>
        </thead>
        <tbody>
            <Virtualize Items="@_appUsers" Context="User" ItemSize="10" OverscanCount="5">
                <tr>
                    <th scope="row"></th>
                    <td>@User.Email</td>
                    <td><button type="button" @onclick="() => AddUser(User)" class=" btn btn-primary">Mitwirkender hinzufügen</button></td>
                    <td><button type="button" @onclick="() => DeleteUser(User)" class="btn btn-danger">Mitwirkender entfernen</button></td>
                </tr>
            </Virtualize>
        </tbody>
    </table>
</div>
</div>




@code
{
    [Parameter]
    public EventCallback<AppUser> UserDeleted { get; set; }
    [Parameter]
    public EventCallback<AppUser> UserAdded { get; set; }

    private List<AppUser>? _displayedAppUsers;
    private List<AppUser>? _appUsers;
    private string _searchString = "";


    protected override void OnInitialized()
    {
        //Load User Manager from DI Container, because it not support concurrency 
        //read more here https://stackoverflow.com/questions/59747983/blazor-concurrency-problem-using-entity-framework-core
        using (var scope = ServiceProvider.CreateScope())
        {
            var userManager = scope.ServiceProvider.GetService<UserManager<AppUser>>();
            _appUsers = userManager!.Users.ToList();
            SearchCategories();
        }

        base.OnInitialized();
    }





    private async Task DeleteUser(AppUser appUser)
    {
        var user = UserManager.Users.First(o => o.Id == appUser.Id);
        await UserDeleted.InvokeAsync(user);
    }

    private async Task AddUser(AppUser appUser)
    {
        var user = UserManager.Users.First(o => o.Id == appUser.Id);
        await UserAdded.InvokeAsync(user);
    }

    private void SearchCategories()
    {
        _displayedAppUsers = _appUsers.FindAll(o => o.Email.Contains(_searchString));
        StateHasChanged();
    }
}
