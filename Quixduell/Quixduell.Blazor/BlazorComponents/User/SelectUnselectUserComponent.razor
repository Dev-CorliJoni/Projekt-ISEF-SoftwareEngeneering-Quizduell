@namespace Quixduell.Blazor.BlazorComponents.User
@using Microsoft.AspNetCore.Identity
@inject IServiceProvider ServiceProvider
@inject UserManager<AppUser> UserManager


@code {
     /*
     * Component can be used to Add or Remove Users from a List, works with Events for the Parent Component
     * Creats a SearchField and a Table
    */
}

<div class="container" style="height:20vh;overflow-y:scroll">
    @if (_displayedAppUsers is not null)
    {
        <div class="form-group">
            <div class="input-group">
                <input class="form-control" placeholder="Suche..." @bind=_searchString @bind:event="oninput" @bind:after="SearchUser">
            </div>
            <table class="table">
                <thead>
                    <tr>
                        <th scope="col"></th>
                        <th scope="col">Nutzer</th>
                        <th scope="col"></th>
                        <th scope="col"></th>
                    </tr>
                </thead>
                <tbody>
                    <Virtualize Items="@_displayedAppUsers" Context="User" ItemSize="10" OverscanCount="5">
                        <tr>
                            <th scope="row"></th>
                            <td>@User.Email</td>
                            <td><button type="button" @onclick="() => AddUser(User)" class=" btn btn-primary">Mitwirkender hinzufügen</button></td>
                            <td><button type="button" @onclick="() => DeleteUser(User)" class="btn btn-danger">Mitwirkender entfernen</button></td>
                        </tr>
                    </Virtualize>
                </tbody>
            </table>
        </div>
    }
</div>



@code
{
    [Parameter]
    public EventCallback<AppUser> UserDeleted { get; set; }
    [Parameter]
    public EventCallback<AppUser> UserAdded { get; set; }

    private List<AppUser>? _displayedAppUsers;
    private List<AppUser>? _appUsers;
    private string _searchString = "";

    /// <summary>
    /// Load Users and Filter them with <see cref="SearchUser"/>see
    /// </summary>
    protected override void OnInitialized()
    {
        //Load User Manager from DI Container, because it not support concurrency
        //read more here https://stackoverflow.com/questions/59747983/blazor-concurrency-problem-using-entity-framework-core
        using (var scope = ServiceProvider.CreateScope())
        {
            var userManager = scope.ServiceProvider.GetService<UserManager<AppUser>>();
            _appUsers = userManager!.Users.ToList();
            SearchUser();
        }

        base.OnInitialized();
    }

    /// <summary>
    /// Fire Event <see cref="UserDeleted"/>see for selected User
    /// </summary>
    /// <param name="appUser"></param>
    /// <returns></returns>
    private async Task DeleteUser(AppUser appUser)
    {
        var user = UserManager.Users.First(o => o.Id == appUser.Id);
        await UserDeleted.InvokeAsync(user);
    }

    /// <summary>
    /// Fire Event <see cref="UserAdded"/>see for selected User
    /// </summary>
    /// <param name="appUser"></param>
    /// <returns></returns>
    private async Task AddUser(AppUser appUser)
    {
        var user = UserManager.Users.First(o => o.Id == appUser.Id);
        await UserAdded.InvokeAsync(user);
    }

    /// <summary>
    /// Filters the List <see cref="_appUsers"/> and save result in <see cref="_displayedAppUsers"/>
    /// Uses SearchString <see cref="_searchString"/>
    /// </summary>
    private void SearchUser()
    {
        if (_appUsers is not null)
        {
            _displayedAppUsers = _appUsers.FindAll(o => (o.Email ?? "").ToLower().Contains(_searchString.ToLower()));
            StateHasChanged();
        }
    }
}
