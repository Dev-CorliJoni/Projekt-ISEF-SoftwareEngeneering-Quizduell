@namespace Quixduell.Blazor.BlazorComponents.Question

@using Quixduell.Blazor.Model.QuestionModel
@using Quixduell.Blazor.BlazorComponents.Answer




@code {
    /*
    * Edit Component for a Question
    * Displays as Pop up, use Bootstrap Modal
    * https://getbootstrap.com/docs/5.0/components/modal/
    * Has to Events OnQuestionHasChanged for Success Change
    * OnQuestionHasNoChange for abort
    */
}



@if (_model is not null)
{
    <div class="modal" tabindex="-1" style="display:block">
        <div class="modal-dialog modal-fullscreen">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Frage bearbeiten</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="OnCloseChild"></button>
                </div>
                <div class="modal-body form-group">
                    <EditForm OnValidSubmit="ComplexValidation" EditContext="_editContext">
                        <DataAnnotationsValidator />
                        <label class="form-label" for="Question">Fragestellung</label>
                        <InputTextArea class="form-control" id="Question" @bind-Value="_model.QuestionText"></InputTextArea>

                        <label class="form-label" for="QuestionType">Fragenart</label>
                        <InputSelect id="QuestionType" class="form-control" @bind-Value="@_model.Question_Type">
                            @foreach (var type in Enum.GetValues(typeof(Question_Type)))
                            {
                                <option value="@type">@type</option>
                            }
                        </InputSelect>
                        <div>
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th scope="col"></th>
                                        <th scope="col">Frage</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <Virtualize Items="@_model.Answers" Context="Answer" ItemSize="10" OverscanCount="5">
                                        <tr @onclick="() => 
                                            {
                                                _selectedAnswer = Answer;
                                                if (_messageStore is not null)
                                                {
                                                    _messageStore.Clear();
                                                }
                                                StateHasChanged();
                                            }">
                                            <th>@Answer.Text</th>
                                            <th>@Answer.IsTrue</th>
                                        </tr>
                                    </Virtualize>
                                </tbody>
                            </table>
                            @if (_selectedAnswer is not null)
                            {
                                <EditAnswerComponent Answer="_selectedAnswer" OnAnswerChanged="() => {_selectedAnswer = null;StateHasChanged();}"></EditAnswerComponent>
                            }
                            <button class="btn btn-secondary" type="button" @onclick="AddAnswer">Antwort hinzufügen</button>
                        </div>

                        <button type="button" @onclick="OnCloseChild" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="submit" class="btn-primary">OK</button>
                        <ValidationSummary />
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}


@code {
    [Parameter]
    public Question? Question { get; set; }

    [Parameter]
    public EventCallback<Question> OnQuestionHasChanged { get; set; }

    [Parameter]
    public EventCallback OnQuestionHasNoChange { get; set; }

    private EditQuestion? _model = null;
    private EditContext? _editContext = null;
    private ValidationMessageStore? _messageStore = null;

    private Answer? _selectedAnswer = null;


    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }

    /// <summary>
    /// Triggert if Param <see cref="Question"/>see is filled by Parent 
    /// Create a new Edit Question Object, and EditContext with ValidationMessage store for 
    /// complex Validation
    /// </summary>
    /// <returns></returns>
    protected override Task OnParametersSetAsync()
    {
        if (Question is not null)
        {
            _model = new EditQuestion(Question);
            _editContext = new EditContext(_model);
            _messageStore = new ValidationMessageStore(_editContext);
        }
        return base.OnParametersSetAsync();
    }

    /// <summary>
    /// Add a new Instance from <see cref="Answer"/> to Answers
    /// </summary>
    private void AddAnswer()
    {
        _model!.Answers.Add(new Answer());
    }

    /// <summary>
    /// Triggert if Form submited after Validation, fire <see cref="OnQuestionHasChanged"/>
    /// </summary>
    /// <returns></returns>
    private async Task OnQuestionSubmited()
    {
        Question!.QuestionText = _model!.QuestionText;
        Question!.Question_Type = _model.Question_Type;
        Question!.Answer = _model.Answers;
        await OnQuestionHasChanged.InvokeAsync(Question);
    }

    /// <summary>
    /// Triggers if Form abort, fire <see cref="OnQuestionHasNoChange"/>
    /// </summary>
    /// <returns></returns>
    private async Task OnCloseChild()
    {
        await OnQuestionHasNoChange.InvokeAsync(Question);
    }


    /// <summary>
    /// Add some complex Validation for Answer
    /// Validation Messages has to be cleared manually
    /// Execute <see cref="OnQuestionSubmited"/>
    /// </summary>
    /// <returns></returns>
    private async Task ComplexValidation()
    {
        if (_model is not null && _messageStore is not null && _editContext is not null)
        {
            
            if (!(_model.Answers.Any(o => o.IsTrue == true)))
            {
                var fi = new FieldIdentifier(_model, "Answers");
                _messageStore.Add(fi, "One Answer has to be true");
                _editContext.NotifyValidationStateChanged();
                return;
            }
            foreach (var Answers in _model.Answers)
            {

                if (Answers.Text.Length < 5)
                {
                    var fi = new FieldIdentifier(_model, "Answers");
                    _messageStore.Add(fi, "The field Answer from all Answers must be a string or array type with a minimum length of '5'.");
                    _editContext.NotifyValidationStateChanged();
                    return;
                }
            }

            await OnQuestionSubmited();
        }
    }

}
