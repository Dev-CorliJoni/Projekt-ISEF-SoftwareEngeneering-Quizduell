
@if (Studyset is not null)
{
    <div class="col div-container">
        <div class="container">
            <div class="row" style="flex-wrap: nowrap;">

                @if (Connections.Count() != 0)
                {
                    <div class="col col-auto">                    
                        @foreach (float mark in HighscoreMarks)
                        {
                            <div class="row justify-content-center medium-text">
                                @mark
                            </div>
                        }

                        <div class="row">
                        </div>
                    </div>
                }

                <div class="col">
                    <div class="container highscore-scroll">
                        <div class="row" style="flex-wrap: nowrap;">
                            @if (Connections.Count() == 0)
                            {
                                <div class="col d-flex justify-content-center align-content-center medium-text">
                                    No Highscores Available
                                </div>
                            }

                            @{var colors = GetRandomBackgrounds().ToList();}
                            @for (int i = 0; i < Connections.Count(); i++)
                            {
                                var connection = Connections.ElementAt(i);

                                <div class="col" style="margin-right: 0.125rem;">

                                    @foreach (float mark in HighscoreMarks)
                                    {
                                        var step = GetMarkSize();
                                        var multiplicator = 100 / step;
                                        
                                        var height = connection.Highscore >= mark ? "100%" : $"{(mark - connection.Highscore) * multiplicator}%";
                                        height = connection.Highscore < mark - step ? "0%" : height;

                                        var background = (connection.Highscore > mark - step ? colors[i] : "");

                                        var rounded = mark >= connection.Highscore;

                                        <div class="row">
                                            <div class="col d-flex" style="margin-left: 0.25rem; margin-right: 0.25rem;">
                                                <div class="medium-text" style="background: @background; height: @height ; width: 100%; align-self: flex-end; border-radius: @(rounded ? "10px 10px 0 0": "0 0 0 0");">
                                                    &nbsp; @* Empty Content *@
                                                </div>
                                            </div>
                                        </div>
                                    }

                                    <div class="row">
                                        <div class="col" style="border: solid @(connection.User == User ? "red " : "darkgray") 2px; border-radius: 1.25rem;">
                                            <div class="row d-flex justify-content-center medium-text">
                                                @connection.Highscore
                                            </div>
                                            <div class="row d-flex justify-content-center small-text" style="padding: inherit;">
                                                @connection.User.UserName.Split('@')[0]
                                            </div>
                                        </div>
                                    </div>

                                </div>
                            }
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div>
}