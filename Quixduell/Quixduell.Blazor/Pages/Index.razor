@page "/"
@using Microsoft.AspNetCore.Identity
@inject IStudysetRepository LernsetRepository
@inject UserManager<User> UserManager
<PageTitle>Index</PageTitle>


@if(Lernsets is not null)
{
    //https://getbootstrap.com/docs/5.0/content/tables/

    <table class="table">
        <thead>
            <tr>
                <th scope="col"></th>
                <th scope="col">Kategorie</th>
                <th scope="col">Ersteller</th>
                <th scope="col"></th>
            </tr>
        </thead>
        <tbody>
            <Virtualize Items="@Lernsets" Context="Lernset" ItemSize="10" OverscanCount="5" >
                <tr>
                    <th scope="row"></th>
                    <td>@Lernset.Category.Name</td>
                    <td>@Lernset.Creator.Email</td>
                    <td><a href="\lernset\edit\@Lernset.ID">Edit</a></td>
                </tr>
                </Virtualize>
        </tbody>
    </table>


    <button class="btn" @onclick="InitSampleData">Init Sample Data</button>
    <p class="text-danger">@ErrorMessage</p>
    
}


@code{


    [CascadingParameter]
    private Task<AuthenticationState> _authenticationState { get; set; }

    List<Studyset>? Lernsets = null;

    string ErrorMessage = "";

    override protected async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();


        Lernsets = new List<Studyset>(await LernsetRepository.GetStudysetsAsync());
    }


    private async Task InitSampleData ()
    {
        var user = (await _authenticationState).User;

        if(user.Identity.IsAuthenticated)
        {
            var currentUser = await UserManager.GetUserAsync(user);


            var category = new Category();
            category.Name = "Test Cat";

            var Lernset = new Studyset(currentUser, category);

            await LernsetRepository.CreateStudysetAsync(Lernset);
            Lernsets = new List<Studyset>(await LernsetRepository.GetStudysetsAsync());
        }
        else
        {
            ErrorMessage = "Not Logged In";
        }




    }
}

